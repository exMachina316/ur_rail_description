<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="ur_on_rail">

  <!-- Import the standard UR5 macro -->
  <xacro:include filename="$(find ur_rail_description)/urdf/ur_macro.xacro" />
  <xacro:include filename="$(find ur_rail_description)/urdf/materials.xacro" />
  <xacro:include filename="$(find ur_rail_description)/urdf/camera_macro.xacro" />

  <!-- Define properties for the linear rail and stand -->
  <xacro:property name="rail_length" value="1.5" />  <!-- Length of the rail -->
  <xacro:property name="rail_width" value="0.1" />   <!-- Width of the rail -->
  <xacro:property name="rail_height" value="0.05" /> <!-- Height of the rail -->

  <!-- stand dimensions -->
  <xacro:property name="stand_width" value="1.4" />
  <xacro:property name="stand_depth" value="0.5" />
  <xacro:property name="stand_height" value="0.8" />
  <xacro:property name="slider_height" value="0.05" />

  <xacro:arg name="name" default="ur" />

  <!-- possible 'ur_type' values: ur3, ur3e, ur5, ur5e, ur7e, ur10, ur10e, ur12e, ur16e, ur20, ur30 -->
  <!-- the default value should raise an error in case this was called without defining the type -->
  <xacro:arg name="ur_type" default="ur5x" />

  <!-- parameters -->
  <xacro:arg name="tf_prefix" default="" />
  <xacro:arg name="joint_limit_params"
    default="$(find ur_rail_description)/config/$(arg ur_type)/joint_limits.yaml" />
  <xacro:arg name="kinematics_params"
    default="$(find ur_rail_description)/config/$(arg ur_type)/default_kinematics.yaml" />
  <xacro:arg name="physical_params"
    default="$(find ur_rail_description)/config/$(arg ur_type)/physical_parameters.yaml" />
  <xacro:arg name="visual_params"
    default="$(find ur_rail_description)/config/$(arg ur_type)/visual_parameters.yaml" />
  <xacro:arg name="transmission_hw_interface" default="" />
  <xacro:arg name="safety_limits" default="false" />
  <xacro:arg name="safety_pos_margin" default="0.15" />
  <xacro:arg name="safety_k_position" default="20" />
  <!-- ros2_control related parameters -->
  <xacro:arg name="headless_mode" default="false" />
  <xacro:arg name="robot_ip" default="0.0.0.0" />
  <xacro:arg name="script_filename" default="" />
  <xacro:arg name="output_recipe_filename" default="" />
  <xacro:arg name="input_recipe_filename" default="" />
  <xacro:arg name="reverse_ip" default="0.0.0.0" />
  <xacro:arg name="script_command_port" default="50004" />
  <xacro:arg name="reverse_port" default="50001" />
  <xacro:arg name="script_sender_port" default="50002" />
  <xacro:arg name="trajectory_port" default="50003" />
  <!--   tool communication related parameters-->
  <xacro:arg name="use_tool_communication" default="false" />
  <xacro:arg name="tool_voltage" default="0" />
  <xacro:arg name="tool_parity" default="0" />
  <xacro:arg name="tool_baud_rate" default="115200" />
  <xacro:arg name="tool_stop_bits" default="1" />
  <xacro:arg name="tool_rx_idle_chars" default="1.5" />
  <xacro:arg name="tool_tx_idle_chars" default="3.5" />
  <xacro:arg name="tool_device_name" default="/tmp/ttyUR" />
  <xacro:arg name="tool_tcp_port" default="54321" />

  <!-- Simulation parameters -->
  <xacro:arg name="use_fake_hardware" default="false" />
  <xacro:arg name="fake_sensor_commands" default="false" />
  <xacro:arg name="sim_gazebo" default="false" />
  <xacro:arg name="sim_ignition" default="false" />
  <xacro:arg name="simulation_controllers" default="" />

  <!-- initial position for simulations (Fake Hardware, Gazebo, Ignition) -->
  <xacro:arg name="initial_positions_file"
    default="$(find ur_rail_description)/config/initial_positions.yaml" />

  <!-- convert to property to use substitution in function -->
  <xacro:property name="initial_positions_file" default="$(arg initial_positions_file)" />
  <xacro:property name="is_sim_gazebo" value="$(arg sim_gazebo)" />
  <xacro:property name="is_sim_ignition" value="$(arg sim_ignition)" />

  <!-- create link fixed to the "world" -->
  <link name="world" />

  <link name="work_cell">
    <visual>
      <origin rpy="0 0 1.5707" xyz="0 0 -0.1" />
      <geometry>
        <mesh filename="file://$(find ur_rail_description)/meshes/workspace/work_cell.stl"
          scale="0.001 0.001 0.001" />
      </geometry>
      <material name="ground_black">
        <color rgba="0.1 0.1 0.1 1.0" />
      </material>
    </visual>
    <collision>
      <origin rpy="0 0 1.5707" xyz="0 0 -0.1" />
      <geometry>
        <mesh filename="file://$(find ur_rail_description)/meshes/workspace/work_cell.stl"
          scale="0.001 0.001 0.001" />
      </geometry>
    </collision>
  </link>

  <joint name="work_cell_joint" type="fixed">
    <origin xyz="0 0 0" rpy="0 0 0" />
    <parent link="world" />
    <child link="work_cell" />
  </joint>

  <!-- arm -->
  <xacro:ur_robot
    name="$(arg name)"
    tf_prefix="$(arg tf_prefix)"
    parent="slider_base"
    mount_yaw="0.7854"
    joint_limits_parameters_file="$(arg joint_limit_params)"
    kinematics_parameters_file="$(arg kinematics_params)"
    physical_parameters_file="$(arg physical_params)"
    visual_parameters_file="$(arg visual_params)"
    transmission_hw_interface="$(arg transmission_hw_interface)"
    safety_limits="$(arg safety_limits)"
    safety_pos_margin="$(arg safety_pos_margin)"
    safety_k_position="$(arg safety_k_position)"
    use_fake_hardware="$(arg use_fake_hardware)"
    fake_sensor_commands="$(arg fake_sensor_commands)"
    sim_gazebo="$(arg sim_gazebo)"
    sim_ignition="$(arg sim_ignition)"
    headless_mode="$(arg headless_mode)"
    initial_positions="${xacro.load_yaml(initial_positions_file)}"
    use_tool_communication="$(arg use_tool_communication)"
    tool_voltage="$(arg tool_voltage)"
    tool_parity="$(arg tool_parity)"
    tool_baud_rate="$(arg tool_baud_rate)"
    tool_stop_bits="$(arg tool_stop_bits)"
    tool_rx_idle_chars="$(arg tool_rx_idle_chars)"
    tool_tx_idle_chars="$(arg tool_tx_idle_chars)"
    tool_device_name="$(arg tool_device_name)"
    tool_tcp_port="$(arg tool_tcp_port)"
    robot_ip="$(arg robot_ip)"
    script_filename="$(arg script_filename)"
    output_recipe_filename="$(arg output_recipe_filename)"
    input_recipe_filename="$(arg input_recipe_filename)"
    reverse_ip="$(arg reverse_ip)"
    script_command_port="$(arg script_command_port)"
    reverse_port="$(arg reverse_port)"
    script_sender_port="$(arg script_sender_port)"
    trajectory_port="$(arg trajectory_port)">
    <origin xyz="0 0 0" rpy="0 0 0" />
  </xacro:ur_robot>

  <!-- <link name="hex_qc_ft_sensor">
    <visual>
      <origin xyz="-0.058 -0.02 -0.03" rpy="1.5707 0 3.1414" />
      <geometry>
        <mesh filename="file://$(find
  ur_rail_description)/meshes/onrobot_hex_qc_rg2/visual/HEX_E_H_QC_v3(1).dae" scale="0.001 0.001
  0.001"/>
      </geometry>
      <material name="White">
        <color rgba="0.79 0.79 0.79 1.0" />
      </material>
    </visual>
    <collision>
      <origin xyz="-0.058 -0.02 -0.03" rpy="1.5707 0 3.1414" />
      <geometry>
        <mesh filename="file://$(find
  ur_rail_description)/meshes/onrobot_hex_qc_rg2/collision/HEX_E_H_QC_v3(1).stl" scale="0.001 0.0015
  0.001"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="10.0" />
      <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0" />
    </inertial>
  </link>

  <joint name="ft_tool_joint" type="fixed">
    <parent link="tool0" />
    <child link="hex_qc_ft_sensor" />
    <origin xyz="0 0 0" rpy="0 0 0" />
  </joint> -->

  <link name="plc_linear_rail">
    <visual>
      <origin xyz="0 0 0.884" rpy="0 0 0" />
      <geometry>
        <mesh filename="file://$(find ur_rail_description)/meshes/workspace/plc_linear_rail.stl"
          scale="0.001 0.001 0.001" />
      </geometry>
      <material name="Aluminium" />
    </visual>
    <collision>
      <origin xyz="0 0 0.884" rpy="0 0 0" />
      <geometry>
        <mesh filename="file://$(find ur_rail_description)/meshes/workspace/plc_linear_rail.stl"
          scale="0.001 0.001 0.001" />
      </geometry>
    </collision>
    <inertial>
      <mass value="10.0" />
      <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0" />
    </inertial>
  </link>

  <!-- Connect plc to world -->
  <joint name="gnd_plc_joint" type="fixed">
    <parent link="work_cell" />
    <child link="plc_linear_rail" />
    <origin xyz="0.5 -1.03 0" rpy="0 0 1.5707" />
  </joint>

  <link name="table1">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <mesh filename="file://$(find ur_rail_description)/meshes/workspace/table.stl"
          scale="0.001 0.001 0.001" />
      </geometry>
      <material name="Aluminium" />
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <mesh filename="file://$(find ur_rail_description)/meshes/workspace/table.stl"
          scale="0.001 0.001 0.001" />
      </geometry>
    </collision>
    <inertial>
      <mass value="10.0" />
      <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0" />
    </inertial>
  </link>

  <link name="table2">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <mesh filename="file://$(find ur_rail_description)/meshes/workspace/table.stl"
          scale="0.001 0.001 0.001" />
      </geometry>
      <material name="Aluminium" />
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <mesh filename="file://$(find ur_rail_description)/meshes/workspace/table.stl"
          scale="0.001 0.001 0.001" />
      </geometry>
    </collision>
    <inertial>
      <mass value="10.0" />
      <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0" />
    </inertial>
  </link>

  <!-- Connect table1 to world -->
  <joint name="gnd_table1_joint" type="fixed">
    <parent link="work_cell" />
    <child link="table1" />
    <origin xyz="0.86 0.25 0.74" rpy="0 0 0" />
  </joint>

  <!-- Connect table2 to world -->
  <joint name="gnd_table2_joint" type="fixed">
    <parent link="work_cell" />
    <child link="table2" />
    <origin xyz="0.0 0.17 0.74" rpy="0 0 0" />
  </joint>

  <link name="linear_rail">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <mesh filename="file://$(find ur_rail_description)/meshes/workspace/linear_rail.stl"
          scale="0.001 0.001 0.001" />
      </geometry>
      <material name="DarkGray">
        <color rgba="0.34 0.34 0.34 1.0" />
      </material>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <mesh filename="file://$(find ur_rail_description)/meshes/workspace/linear_rail.stl"
          scale="0.001 0.001 0.001" />
      </geometry>
    </collision>
    <inertial>
      <mass value="10.0" />
      <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0" />
    </inertial>
  </link>

  <!-- Connect linear rail to world -->
  <joint name="ground_to_rail" type="fixed">
    <parent link="work_cell" />
    <child link="linear_rail" />
    <origin xyz="0 -0.48 0.79" rpy="0 0 0" />
  </joint>

  <!-- Slider base for robot -->
  <link name="slider_base">
    <visual>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <mesh filename="file://$(find ur_rail_description)/meshes/workspace/slider_base.stl"
          scale="0.001 0.001 0.001" />
      </geometry>
      <material name="tin_alloy">
        <color rgba="0.5 0.45 0.3 1.0" />
      </material>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <mesh filename="file://$(find ur_rail_description)/meshes/workspace/slider_base.stl"
          scale="0.001 0.001 0.001" />
      </geometry>
    </collision>
    <inertial>
      <mass value="1.0" />
      <inertia ixx="0.01" ixy="0.0" ixz="0.0" iyy="0.01" iyz="0.0" izz="0.01" />
    </inertial>
  </link>

  <!-- Connect slider to rail -->
  <!-- <joint name="rail_to_slider_joint" type="prismatic">
    <parent link="linear_rail" />
    <child link="slider_base" />
    <origin xyz="0 0 ${(slider_height+rail_height)/2}" rpy="0 0 0" />
    <axis xyz="1 0 0" />
    <limit lower="-0.686" upper="0.686" effort="1000" velocity="0.5" />
    <dynamics damping="50.0" friction="1.0" />
  </joint> -->
  <joint name="rail_to_slider_joint" type="fixed">
    <parent link="linear_rail" />
    <child link="slider_base" />
    <origin xyz="0 0 0.086" rpy="0 0 0" />
  </joint>

  <!-- RGB Cameras
  <xacro:camera_macro name="oak1_rgb_camera">
    <origin xyz="0.862 0.17 1.175" rpy="-0.005 0.455 3.095" />
  </xacro:camera_macro>
  <xacro:camera_macro name="oak2_rgb_camera">
    <origin xyz="-1.0 -0.7 2.0" rpy="0 0.8 0.64" />
  </xacro:camera_macro>
  <xacro:camera_macro name="oak3_rgb_camera">
    <origin xyz="0 1.0 2.0" rpy="0 0 -1.5707" />
  </xacro:camera_macro>

  Depth Cameras
  <xacro:depth_camera_macro name="depth_camera">
    <origin xyz="0 0 3" rpy="0 1.5707 0" />
  </xacro:depth_camera_macro> -->

  <xacro:if value="$(arg sim_gazebo)">
    <!-- Gazebo plugins -->
    <gazebo reference="world">
    </gazebo>
    <gazebo>
      <plugin filename="libgazebo_ros2_control.so" name="gazebo_ros2_control">
        <parameters>$(arg simulation_controllers)</parameters>
      </plugin>
    </gazebo>
  </xacro:if>

  <xacro:if value="$(arg sim_ignition)">
    <!-- Gazebo plugins -->
    <gazebo reference="world"></gazebo>
    <gazebo>
      <plugin
        filename="ignition-gazebo-sensors-system"
        name="gz::sim::systems::Sensors">
        <render_engine>ogre2</render_engine>
      </plugin>

      <plugin filename="gz_ros2_control-system" name="gz_ros2_control::GazeboSimROS2ControlPlugin">
        <parameters>$(arg simulation_controllers)</parameters>
        <controller_manager_node_name>$(arg tf_prefix)controller_manager</controller_manager_node_name>
      </plugin>
    </gazebo>
  </xacro:if>

</robot>